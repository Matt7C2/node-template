name: Docker Image Build and Cleanup

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Permetti al GITHUB_TOKEN di scrivere pacchetti e leggere contenuti
permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Registry
        # Sostituisci con il tuo registry (es. docker.io o ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: <YOUR_REGISTRY> # Esempio: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }} # O ${{ github.actor }} per GHCR
          password: ${{ secrets.DOCKERHUB_TOKEN }} # O ${{ secrets.GITHUB_TOKEN }} per GHCR

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: <YOUR_REGISTRY>/<YOUR_IMAGE_NAME>
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
            type=sha,format=short,prefix=sha-
            type=ref,event=branch
            # Aggiunge un tag basato sul run ID per una versione univoca
            type=raw,value=${{ github.run_id }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }} # Fai il push solo su eventi di "push" (sul main)
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Job per la pulizia, viene eseguito solo dopo un push sul main
  cleanup:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Delete old package versions
        uses: snok/container-retention-policy@v3
        with:
          # TOKEN: usa un PAT (Personal Access Token) con permessi `delete:packages` per il tuo utente/org.
          # NON USARE ${{ secrets.GITHUB_TOKEN }} in quanto NON ha i permessi per eliminare versioni.
          token: ${{ secrets.REPO_DELETE_TOKEN }}
          account: <ACCOUNT_USERNAME_OR_ORG> # Il tuo nome utente o organizzazione
          image-names: <YOUR_IMAGE_NAME>
          keep-n-most-recent: 3 # Mantiene le 3 versioni pi√π recenti taggate
          registry: <YOUR_REGISTRY> # Esempio: ghcr.io