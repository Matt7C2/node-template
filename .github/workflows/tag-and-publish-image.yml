# name: publish-image

# on:
#   push:
#     branches: [ "main" ]
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   REGISTRY: ghcr.io

# permissions:  
#   contents: write  # Serve per creare e pushare i tag

# jobs:
#   auto-tag:
#     runs-on: ubuntu-latest
#     outputs:
#       new_tag: ${{ steps.get_latest.outputs.new_tag }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Get latest tag
#         id: get_latest
#         run: |
#           latest_tag=$(git tag --sort=-v:refname | head -n 1)
#           echo "Latest tag: $latest_tag"
#           if [[ -z "$latest_tag" ]]; then
#             new_tag="v1.0.0"
#           else
#             new_tag=$(echo $latest_tag | awk -F. '{$NF++; print $1"."$2"."$3}' OFS=. )
#           fi
#           echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
#           echo "Generated tag: $new_tag"

#       - name: Create new tag
#         run: |
#           git config --global user.name "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
#           git tag ${{ steps.get_latest.outputs.new_tag }}
#           git push origin ${{ steps.get_latest.outputs.new_tag }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   build:
#     needs: auto-tag
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#       id-token: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Install cosign
#         if: github.event_name != 'pull_request'
#         uses: sigstore/cosign-installer@v3.5.0
#         with:
#           cosign-release: 'v2.2.4'

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log into registry ${{ env.REGISTRY }}
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Prepare lowercase image name and tags
#         run: |
#           IMAGE_NAME_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
#           TAG_LOWER=$(echo "${{ needs.auto-tag.outputs.new_tag }}" | tr '[:upper:]' '[:lower:]')
#           echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV
#           echo "TAG_LOWER=$TAG_LOWER" >> $GITHUB_ENV
#           echo "Full image tag: ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${TAG_LOWER}"

#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./docker/Dockerfile
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: |
#             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.TAG_LOWER }}
#             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Sign the published Docker image
#         if: ${{ github.event_name != 'pull_request' }}
#         env:
#           IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.TAG_LOWER }}
#           DIGEST: ${{ steps.build-and-push.outputs.digest }}
#         run: cosign sign --yes ${IMAGE_FULL}@${DIGEST}

#   cleanup:
#     name: Cleanup old images
#     needs: build
#     runs-on: ubuntu-latest
#     permissions:
#       packages: write
#       contents: read

#     steps:
#       - name: Delete old image versions (keep last 10)
#         uses: actions/delete-package-versions@v5
#         with:
#           package-name: ${{ github.event.repository.name }}
#           package-type: container
#           min-versions-to-keep: 10
#           token: ${{ secrets.GITHUB_TOKEN }}
#           delete-untagged-versions: true
#           days-before-deletion: 0

name: publish-image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

permissions:  
  contents: write  # ðŸ”¥ Serve per creare e pushare i tag

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ðŸ”¥ Necessario per leggere tutti i tag

      - name: Get latest tag
        id: get_latest
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0.0"
          else
            new_tag=$(echo $latest_tag | awk -F. '{$NF++; print $1"."$2"."$3}' OFS=.)
          fi
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # ðŸ”¥ Usa il token per autenticarsi

  build:
    needs: auto-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}        