name: Build, Push to GHCR, and Cleanup

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Permessi richiesti:
# - packages: write per pushare l'immagine
# - contents: read per il checkout e i metadati
permissions:
  contents: read
  packages: write

# Variabili riutilizzabili
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # Nome predefinito: <USER>/<REPO_NAME>

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} 
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag: latest (solo su push al main)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
            # Tag: versione univoca con l'ID del run
            type=raw,value=${{ github.run_id }}
            # Tag: versione con short SHA
            type=sha,format=short
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # ðŸ‘‡ AGGIORNAMENTO CHIAVE: specifica il percorso del Dockerfile
          context: ./docker
          file: ./docker/Dockerfile
          # ðŸ‘† Il contesto Ã¨ la cartella, il file Ã¨ il Dockerfile specifico
          push: ${{ github.event_name != 'pull_request' }} # Push solo su push
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Job di pulizia: eseguito solo dopo un push andato a buon fine sul main
  cleanup_old_versions:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Delete old package versions on GHCR
        uses: snok/container-retention-policy@v3
        with:
          # RICORDA: serve un PAT con permesso "delete:packages".
          token: ${{ secrets.REPO_DELETE_TOKEN }} 
          account: <ACCOUNT_USERNAME_OR_ORG> # Il tuo nome utente o organizzazione GitHub
          image-names: <YOUR_IMAGE_NAME>
          keep-n-most-recent: 3 # Mantiene le 3 versioni taggate piÃ¹ recenti.
          registry: ${{ env.REGISTRY }}