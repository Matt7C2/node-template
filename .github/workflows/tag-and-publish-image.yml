name: publish-image

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io

permissions:  
  contents: write  # Serve per creare e pushare i tag

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.get_latest.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0.0"
          else
            new_tag=$(echo $latest_tag | awk -F. '{$NF++; print $1"."$2"."$3}' OFS=. )
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "Generated tag: $new_tag"

      - name: Create new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.get_latest.outputs.new_tag }}
          git push origin ${{ steps.get_latest.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: auto-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare lowercase image name and tag
        run: |
          IMAGE_NAME_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          TAG_LOWER=$(echo "${{ needs.auto-tag.outputs.new_tag }}" | tr '[:upper:]' '[:lower:]')
          echo "DOCKER_TAG=${IMAGE_NAME_LOWER}:${TAG_LOWER}" >> $GITHUB_ENV
          echo "Full image tag: ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${TAG_LOWER}"

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_TAG%:* }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          IMAGE_FULL: ${{ env.REGISTRY }}/${{ env.DOCKER_TAG }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: cosign sign --yes ${IMAGE_FULL}@${DIGEST}

  cleanup:
    name: Cleanup old images
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Delete old image versions (keep last 10)
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 10
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-untagged-versions: true
          days-before-deletion: 0 